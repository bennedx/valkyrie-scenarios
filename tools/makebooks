#!/bin/gawk -f

@include "common.awk"

# usage:  awk -f makebooks.awk (journal).book ...
#
# Reads journal.txt and creates two files:
#       (journal).events.ini                     The events 
#       localization.english.txt                 Updates the main localization file

BEGIN       {
				realLocalizationFile="Localization.English.txt"
				localizationFile = "localization.temp.txt"
                stderr = "/dev/stderr"
                
				debug = 0

                FS="|"

                NAME = 1
                CONDITIONS = 1
                TEXT = 2

				SKILLCHECK =3
				PASS = 4
				FAIL = 5

                TESTS = 6
                OPERATIONS = 7
                VISIBLE = 8
				VISIBLEOPERATION=9
                ISVISIBLE = 10
                TOCTEXT = 11
                INILINES = 12
                ISEXIT = 13
                FREEACTION = 14
				
				textContinue = "Continue"
				textCancel = "Cancel"
				
				previousFile = ""
				abort = 0
            }

$1 == "debug" {
				debug = 1
			}


previousFile != FILENAME {
				if (previousFile != "" && !abort) {
                    OutputBook(eventsFile, localizationFile, bookName, isRandom, isKeep, startTocText, pages, startLines, endLines, isEndDirective)
					close(eventsFile)
					close(localizationFile)
    				combineLocalization("Event" bookName, localizationFile, realLocalizationFile)
				}
				
				partCount = split(FILENAME, fileParts, ".")
				if (partCount != 2 || fileParts[2] != "book") {
				    printf "'" FILENAME "' must have an extension of '.book'" >> stderr
					exit 1
				}
				
				printf "%s\n", FILENAME
				
				eventsFile = fileParts[1] ".events.ini"
                printf "" > eventsFile
				printf "" > localizationFile
                
                globalEventCounter = 0
                isBook = 0
				
				previousFile = FILENAME;
			}


# remove leading and trailing blanks
            {
                $0 = trim($0)
            }
            
/^\s*$/     {
                # skip blank lines
                next
            }
            
/^\s*#/     {   # skip comments
                next
            }

			{ #if (debug) print $0 >> stderr
			}

# book:  starts a book. Options are:
#        book|Name|random|keep        Pages are all available as {action}s; after first use, {action} goes away
#        book||random|nokeep      Pages are all available, but each is removed after first use
#        book|ordered|keep       Only the first page is available as an {action}. On first use, {action} is removed from Page and the second Page is made available as an {action}. Repeat.
#        book|ordered|nokeep     First Page is shown as {action}; after first use, it is no longer available
#
# books can be followed by:  line (only before page)
$1 == "book" {
                if (isBook) {
                    OutputBook(eventsFile, localizationFile, bookName, isRandom, isKeep, startTocText, pages, startLines, endLines, isEndDirective)
					close(eventsFile)
					close(localizationFile)
    				combineLocalization("Event" bookName, localizationFile, realLocalizationFile)
                }
				
                isBook = 1
               
                bookName = $2
                isRandom = $3 == "random"
                isKeep = $4 == "keep"

				if ($5 == "loop") {
					isLooped = true
				} else if($5 != "") {
					isLooped = false
				} else {
					# default so orderd/nokeep is false and all others are true
					isLooped = isRandom || isKeep
				}

                bookCount++
                books[bookCount] = bookName
				if (debug) printf "bookName=%s, isRandom=%s, isKeep=%s\n", bookName, isRandom, isKeep >> stderr
                
				isEndDirective = 0
                delete pages
                pageCount = 0
				startTocText = ""
                endTocText = ""
                delete startLines
                delete endLines
                next
            }


# page|<button text>|<text>:  Adds a new page with <button text> to access it
$1 == "page" || $1 == "end" {
				if (isEndDirective && $1 == "page") {
					printf "'page' is not allowed after 'end'\n" >> stderr
					abort = true
				} else if (isEndDirective) {
					printf "'end' cannot be used more than once in a book" >> stderr
					abort = true
				} else if ($1 == "end") {
					isEndDirective = 1
				}

                # add this page; a page is an array of values that describe the page
                pageCount++
                if (debug) printf "Adding pages[%i] %s, %s\n", pageCount, $2, $1 >> stderr
                pages[pageCount][NAME] = isEndDirective ? "" : $2
                pages[pageCount][TEXT] = isEndDirective ? $2 : $3
				if (isEndDirective) pages[pageCount][TOCTEXT] = $2
				pages[pageCount][FREEACTION] = 0
                testCount = 0
                next
            }

$1 == "start" {
				if (pageCount) {
					print "'start' must come before 'page'" > stderr
					abort = true
				}
				
				startTocText = $2
				next
			}

# toc|<text>: This is the <text> shown in the popup offering a page to you. The text actually shown is taken from the first page that has no {action} pending; if none, uses the text from the end directive
#             If there is no 'toc', the next page will be shown immediately with only a [Continue] button. This only makes sense for ordered|nokeep; for others, the result is undefined
#             All pages should have a 'toc' or none of them should (again, results undefined otherwise)
$1 == "toc" {
                pages[pageCount][TOCTEXT] = $2
                next
            }


# test|<expr>|<text>:  Uses this <text> instead of the page line if <expr> returns true
$1 == "test" {
                testCount++
                if (debug) printf "test: pages[pageCount][TESTS][testCount] = pages[%i][%i][%i]\n", pageCount, TESTS, testCount >> stderr
                pages[pageCount][TESTS][testCount][CONDITIONS] = $2
                pages[pageCount][TESTS][testCount][TEXT] = $3
                next
            }

# operations|...:  Adds an 'operations' line directly to the page
$1 == "operations" {
                pages[pageCount][OPERATIONS] = $2
                if (debug) printf "operations: pages[pageCount][OPERATIONS] => pages[%i][%i] = %s\n", pageCount, OPERATIONS, pages[pageCount][OPERATIONS] >> stderr
                next
            }

# visible|variable:  Page only. If variable returns <> 0, the page is made avaiable.
$1 == "visible" {
                pages[pageCount][VISIBLE] = $2
				pages[pageCount][VISIBLEOPERATION] = ""
				if (debug) printf "%s:  pages[%i][VISIBLE]=%s\n", bookName, pageCount, pages[pageCount][VISIBLE] >> stderr
                next
            }

$1 == "notvisible" {
                pages[pageCount][VISIBLE] = $2
				pages[pageCount][VISIBLEOPERATION] = "!"
				if (debug) printf "%s:  pages[%i][VISIBLE]=%s\n", bookName, pageCount, pages[pageCount][VISIBLE] >> stderr
                next
            }

# 
$1 == "freeaction" {
				pages[pageCount][FREEACTION] = 1
				
				if (isRandom && !isKeep) {
					printf "%s:  Don't use 'freeaction' with random/nokeep\n", bookName >> stderr
					abort = 1
				}
				
				next
			}
			

# line|...:  adds a line directly to the event file. These lines are usually assignments, but can be anything. 
#   If there are no pages, these lines go into the Start event
#   If we have seen the 'end' directive, these lines go into the End event
#   Otherwise, they go into the current page
$1 == "line" {
                
                if (pageCount == 0) {
                    # this is before the first page, put in the Start event
                    startLines[length(startLines) + 1] = $2
                } else if (endTocText != "") {
                    # for the end event, put these lines in an array
                    endLines[length(endLines) + 1] = $2
                } else {
                    # the others go against the current page
                    pages[pageCount][INILINES][length(pages[pageCount][INILINES]) + 1] = $2
                }
                
                next
            }

# exit:  Aborts the book immediately by transferring to Event<book>End
$1 == "exit" {
                pages[pageCount][ISEXIT] = 1
                next
            }
            
$1 == "skillcheck" {
				pages[pageCount][SKILLCHECK] = $2
				next
			}

$1 = "pass" {
				pages[pageCount][PASS] = $2
				next
			}

$1 = "fail" {
				pages[pageCount][FAIL] = $2
				next
			}
			
# language:  specifies the language used in the locationization filename and the file's header
$1 == "language" {
				if (isBook) {
					printf "'language' directive must be first command in file" >> stderr
					abort = 1
					exit
				}
				
				language = $2
				localizationHeader = ".," + $2
				
				realLocalizationFile = sprintf("Localization.%s.txt", language)
				next
			}
			
# cancel|<text>: The text for the [Cancel] button; the default is "Cancel."	Use only once.
$1 == "cancel" {
				textCancel = $2
				next
			}
			
# continue|<text>: The text for the [Continue] button; the default is "Continue." Use only once.
$1 == "continue" {
				textContinue = $2
				next
            }

END         {
				if (abort) {
					print "Aborting"
					exit
				}
				
                if (isBook) {
                    OutputBook(eventsFile, localizationFile, bookName, isRandom, isKeep, startTocText, pages, startLines, endLines, isEndDirective)
					close(eventsFile)
					close(localizationFile)
    				combineLocalization("Event" bookName, localizationFile, realLocalizationFile)
                }
            }
            
            {
                printf "Unknown command: %s\n", $0
            }


function OutputBook(eventsFile, localizationFile, bookName, isRandom, isKeep, startTocText, pages, startLines, endLines, isEndDirective, 
      pageCount, separator, events, pageIndex, testIndex, operations, testEventName, lineIndex, conditions) {

    # bookName will only be empty on the first run
    if (bookName == "") return

    # start with ReadPage entries (all versions use this)
    if (debug) printf "OutputBook(%s)\n", bookName >> stderr
	
    pageCount = length(pages)
    for(pageIndex = 1; pageIndex <= pageCount; pageIndex++) {
        separator = ""
        events = ""

        operations = pages[pageIndex][OPERATIONS]

        #printf "test: length(pages[pageIndex][TESTS]) = length(pages[%i][%i]) = %i\n", pageIndex, TESTS, length(pages[pageIndex][TESTS]) >> stderr
        for (testIndex = 1; testIndex <= length(pages[pageIndex][TESTS]); testIndex++) {
            testEventName = sprintf("Event%sReadPage%iTest%i", bookName, pageIndex, testIndex)
            events = events separator testEventName
            separator = " "
            
            printf "\n[%s]\n", testEventName >> eventsFile
			printf "buttons=1\n" >> eventsFile
			printf "%s.button1,%s\n", testEventName, textContinue >> localizationFile

			if (pages[pageIndex][TOCTEXT] == "") {
				# we don't want to go back to the TOC after this
				printf "display=false\n" >> eventsFile
				pages[pageIndex][ISEXIT] = 1
				printf "%s.text,\n", testEventName >> localizationFile
			} else {
				# we have TOC text, so show it
				printf "display=true\n" >> eventsFile
				printf "%s.text,%s\n", testEventName, FixQuotes(pages[pageIndex][TESTS][testIndex][TEXT]) >> localizationFile
			}

			printf "event1=Event%sReadPage%iTestEnd Event%sReadPage%iEnd\n", bookName, pageIndex, bookName, pageIndex >> eventsFile
			printf "vartests=%s\n", ConvertToVarTests(pages[pageIndex][TESTS][testIndex][CONDITIONS]) >> eventsFile
        }
        
        # create the base message to show if none of the conditional ones fire
        events = events separator sprintf("Event%sReadPage%iBase", bookName, pageIndex)
        separator = " "
        
        printf "\n[Event%sReadPage%iBase]\n", bookName, pageIndex >> eventsFile
		printf "display=true\n" >> eventsFile
        printf "buttons=1\n" >> eventsFile
        printf "event1=Event%sReadPage%iTestEnd Event%sReadPage%iEnd\n", bookName, pageIndex, bookName, pageIndex >> eventsFile

        printf "Event%sReadPage%iBase.text,%s\n", bookName, pageIndex, FixQuotes(pages[pageIndex][TEXT]) >> localizationFile
        printf "Event%sReadPage%iBase.button1,%s\n", bookName, pageIndex, textContinue >> localizationFile

		# this "TestEnd" page checks to see if all the pages have already been read
		# we do it before we set the flag saying we read this page
		# (this is done for random to know when all the pages have been read so the 'end' directive text can be shown on the TOC)
		printf "\n[Event%sReadPage%iTestEnd]\n", bookName, pageIndex >> eventsFile
		printf "Event%sReadPage%iTestEnd.text,\n", bookName, pageIndex >> localizationFile
		printf "display=false\n" >> eventsFile
		printf "buttons=1\n" >> eventsFile
		printf "event1=Event%sReadPage%iEnd\n", bookName, pageIndex >> eventsFile
		printf "Event%sReadPage%iTestEnd.button1,\n", bookName, pageIndex >> localizationFile

		conditions = sprintf("read%sFinished,==,0", bookName)
		for (testIndex = 1; testIndex <= length(pages) - isEndDirective; testIndex++) {
			conditions = sprintf("%s read%sPage%i,>,0", conditions, bookName, testIndex)
		}
		printf "vartests=%s\n", ConvertToVarTests(conditions) >> eventsFile
		printf "operations=read%sFinished,=,1\n", bookName >> eventsFile
		
		# the actual end page
        printf "\n[Event%sReadPage%iEnd]\n", bookName, pageIndex >> eventsFile
		printf "Event%sReadPage%iEnd.text,\n", bookName, pageIndex >> localizationFile
        printf "display=false\n" >> eventsFile
        printf "buttons=1\n" >> eventsFile
		printf "Event%sReadPage%iEnd.button1,\n", bookName, pageIndex >> localizationFile
		
        if (pages[pageIndex][ISEXIT] == 1) {
            printf "event1=Event%sEnd\n", bookName >> eventsFile
        } else if (pageIndex == pageCount && isEndDirective) {
			printf "event1=Event%sEnd\n", bookname >> eventsFile
		} else {
            printf "event1=Event%s%s\n", bookName, (isLooped ? "Start" : "End") >> eventsFile
        }

        operations=UnionOperations(pages[pageIndex][OPERATIONS], endLines)
        printf "operations=read%sPage%i,=,1 read%sPreviousPage,=,%i %s\n", bookName, pageIndex, bookName, pageIndex, operations >> eventsFile

		for(lineIndex = 1; lineIndex <= length(pages[pageIndex][INILINES]); lineIndex++) {
			print pages[pageIndex][INILINES][lineIndex] >> eventsFile
		}
        
        # now create the event to choose the right version of the page to show
        printf "\n[Event%sReadPage%i]\n", bookName, pageIndex >> eventsFile
        printf "buttons=1\n"  >> eventsFile
        printf "event1=%s\n", events >> eventsFile 
        printf "Event%sReadPage%i.button1,%s\n", bookName, pageIndex, textContinue >> localizationFile
        printf "Event%sReadPage%i.text,\n", bookName, pageIndex >> localizationFile
        printf "display=false\n" >> eventsFile
    }
    
    globalEventCounter = 0
    if (isRandom) {
        # random / keep
        # generate a TOC that shows all options, all the time; user can act on any one of them; after that, that option no longer costs an action
        # requires a TOC for every permutation of { action/no-action, visibles }

        # random / nokeep
        # generate a TOC that shows all options to start; user can act on any one of them; after that, that option is no longer visible
        # requires a TOC for each permutation of { show/not-show, visibles }		
        OutputRandomToc(eventsFile, localizationFile, bookName, isKeep, startTocText, pages, startLines, endLines, isEndDirective)

	} else if (isKeep) {
		# ordered / keep
        OutputOrderedKeepToc(eventsFile, localizationFile, bookName, pages, startLines, endLines, isEndDirective)

    } else {
        OutputOrderedNoKeepToc(eventsFile, localizationFile, bookName, pages, startLines, endLines, isEndDirective)
    }
}

function OutputRandomToc(eventsFile, localizationFile, bookName, isKeep, startTocText, pages, startLines, endLines, isEndDirective,
    events, eventSeparator, conditions, pageIndex, lineIndex, tocs, text, visibleCondition, readCondition,
	eventIndex, testIndex) {
	
	if (debug) printf "OutputRandomToc(%s, %s, %s, p[%i], s[%i], e[%i], %i)\n",
		eventsFile, localizationFile, bookName, length(pages), length(startLines), length(endLines), isEndDirective

    events = ""
    eventSeparator = ""
    
	tocs[0] = startTocText
	if (tocs[0] == "") toc[0] = "(add a 'start' directive)"
	
	# this gets all of the main pages, plus the 'end' directive
	for(pageIndex = 1; pageIndex <= length(pages); pageIndex++) {
		text = pages[pageIndex][TOCTEXT]
		if (text == "") text = sprintf("(page '%s' needs a 'toc' directive)", pages[pageIndex][NAME])
		tocs[pageIndex] = text
	}
	
	events = ""
	for(tocIndex = 0; tocIndex < length(tocs); tocIndex++) {
		tocEventName = sprintf("Event%sToc%i", bookName, tocIndex)
		events = events eventSeparator tocEventName
		eventSeparator = " "
		
		print "" >> eventsFile
		printf "[%s]\n", tocEventName >> eventsFile
		
		if (tocIndex < length(tocs) - isEndDirective) {
			# this is a normal page
			readCondition = sprintf("read%sPreviousPage,==,%i read%sFinished,==,0", bookName, tocIndex, bookName)
			printf "vartests=%s\n", ConvertToVarTests(readCondition) >> eventsFile
		} else {
			# this is the 'end' directive; there is no test because it will always
			# fall through once readXxxFinished > 0
		}
		
		printf "%s.text,%s\n", tocEventName, tocs[tocIndex] >> localizationFile
		
		eventIndex = 1

		for(pageIndex = 1; pageIndex < length(pages); pageIndex++) {
			visibleCondition = ""
			if (pages[pageIndex][VISIBLE] != "") {
				if (pages[pageIndex][VISIBLEOPERATION] == "!") {
					visibleCondition = sprintf("%s,%s,0", pages[pageIndex][VISIBLE], (visible ? ">" : "==" ) )
				} else {
					visibleCondition = sprintf("%s,%s,0", pages[pageIndex][VISIBLE], (visible ? "==" : ">" ) )
				}			
			}

			# output the already-read version
			if (isKeep) {
				printf "event%i=Event%sReadPage%i\n", eventIndex, bookName, pageIndex >> eventsFile
				printf "%s.button%i,%s\n", tocEventName, eventIndex, pages[pageIndex][NAME] >> localizationFile

				readCondition = ""
				if (!pages[pageIndex][FREEACTION]) {
					readCondition = sprintf("read%sPage%i,>,0", bookName, pageIndex)
				}
				
				conditions = ConvertToVarTests(trim(visibleCondition " " readCondition))
				if (conditions != "") {
					printf "event%iCondition=%s\n", eventIndex, conditions >> eventsFile
					printf "event%iConditionAction=hide\n", eventIndex >> eventsFile
					
				} else {
					# there are no conditions, so the button always shows
				}
				
				eventIndex++
			}
			
			# if this is free, there will not be an {action} button
			if (pages[pageIndex][FREEACTION]) continue
			
			# output the {action} button
			printf "event%i=Event%sReadPage%i\n", eventIndex, bookName, pageIndex >> eventsFile
			printf "%s.button%i,{action} %s\n", tocEventName, eventIndex, pages[pageIndex][NAME] >> localizationFile
			
			readCondition = sprintf("read%sPage%i,==,0", bookName, pageIndex)
			conditions = ConvertToVarTests(trim(visibleCondition " " readCondition))
			
			printf "event%iCondition=%s\n", eventIndex, conditions >> eventsFile
			printf "event%iConditionAction=hide\n", eventIndex >> eventsFile
			
			eventIndex++
		}
		
		printf "event%i=Event%sTestEnd Event%sEnd\n", eventIndex, bookName, bookName >> eventsFile
		printf "%s.button%i,%s\n", tocEventName, eventIndex, textCancel >> localizationFile

		printf "buttons=%i\n", eventIndex >> eventsFile
	}

	# this "TestEnd" page checks to see if all the pages have already been read
	# we do it before we set the flag saying we read this page
	# (this is done for random to know when all the pages have been read so the 'end' directive text can be shown on the TOC)
	printf "\n[Event%sTestEnd]\n", bookName >> eventsFile
	printf "Event%sTestEnd.text,\n", bookName >> localizationFile
	printf "display=false\n" >> eventsFile
	printf "buttons=1\n" >> eventsFile
	printf "event1=Event%sEnd\n", bookName >> eventsFile
	printf "Event%sTestEnd.button1,\n", bookName >> localizationFile

	conditions = sprintf("read%sFinished,==,0", bookName)
	for (testIndex = 1; testIndex <= length(pages) - isEndDirective; testIndex++) {
		conditions = sprintf("%s read%sPage%i,>,0", conditions, bookName, testIndex)
	}
	printf "vartests=%s\n", ConvertToVarTests(conditions) >> eventsFile
	printf "operations=read%sFinished,=,1\n", bookName >> eventsFile
	
    # create event to choose the toc show this time
    printf "\n[Event%sStart]\n", bookName >> eventsFile
    printf "buttons=1\n" >> eventsFile
    printf "event1=%s\n", events >> eventsFile
    printf "display=false\n" >> eventsFile
    printf "Event%sStart.text,\n", bookName >> localizationFile
    printf "Event%sStart.button1,\n", bookName >> localizationFile
    
    for(lineIndex = 1; lineIndex <= length(startLines); lineIndex++) {
        printf "%s\n", startLines[lineIndex] >> eventsFile
    }
    
    # and the End
    printf "\n[Event%sEnd]\n", bookName >> eventsFile
    printf "buttons=0\n" >> eventsFile
    printf "display=false\n" >> eventsFile
    printf "Event%sEnd.text,\n", bookName >> localizationFile
    
    for(lineIndex = 1; lineIndex <= length(endLines); lineIndex++) {
        printf "%s\n", endLines[lineIndex] >> eventsFile
    }
}

function OutputOrderedNoKeepToc(eventsFile, localizationFile, bookName, pages, startLines, endLines, isEndDirective,      pageIndex, pageEventName, eventName, events, eventSeparator, wasReadCondition, tocText, line) {
	# for no keep, the rules are simple:  one event that references a bunch of pass-thru proxy events for ReadPage events (to handle visibility)

	
	if (debug) printf "OutputOrderedNoKeepToc(%s, %s, %s, p[%i], s[%i], e[%i], %i)\n",
		eventsFile, localizationFile, bookName, length(pages), length(startLines), length(endLines), isEndDirective

	event = ""
	eventSeparator = ""

	# go through each page, one-by-one
	for (pageIndex = 1; pageIndex <= length(pages); pageIndex++) {
		# generate a proxy event
		globalEventCounter++
		pageEventName = sprintf("Event%sReadPage%i", bookName, pageIndex)
		eventName = sprintf("%sProxy", pageEventName)
		events = events eventSeparator eventName
		eventSeparator = " "
		
		printf "\n[%s]\n", eventName >> eventsFile
		printf "%s.text,\n", eventName >> localizationFile

		printf "buttons=1\n" >> eventsFile
		printf "%s.button1,\n", eventName >> localizationFile
		
		# add a condition to it:  for nokeep, we only show pages that haven't been read yet
		wasReadCondition = ConvertToVarTests(sprintf("read%sPage%i,==,0", bookName, pageIndex))

		# printf "pages[%i][VISIBLE]=%s\n", pageIndex, pages[pageIndex][VISIBLE] >> stderr
		if (isEndDirective && pageIndex == length(pages)) {
			# this is the 'end' directive
			# there is no condition here
		
		} else if (pages[pageIndex][VISIBLE] == "") {
			# just do the page-read condition
			printf "vartests=%s\n", wasReadCondition >>eventsFile

		} else if (pages[pageIndex][VISIBLEOPERATION] == "!") {
			print "vartests=" ConvertToVarTests(sprintf("%s AND %s,==,0\n", wasReadCondition, pages[pageIndex][VISIBLE])) >> eventsFile

		} else {
			print "vartests=" ConvertToVarTests(sprintf("%s AND %s,>,0\n", wasReadCondition, pages[pageIndex][VISIBLE])) >> eventsFile
		}

		# branch to real read page
		printf "event1=%s\n", pageEventName >> eventsFile
		
		tocText = pages[pageIndex][TOCTEXT]
		
		if (tocText) {
			# generate continue/cancel buttons
			printf "display=true\n" >> eventsFile
			printf "buttons=2\n" >> eventsFile
			printf "%s.text,%s\n", eventName, tocText >> localizationFile

			#continue button
			printf "%s.button1,%s%s\n", eventName, (isActionable ? "{action} " : ""), textContinue >> localizationFile
			
			#cancel button
			printf "event2=Event%s%s\n", bookName, (isLooped ? "Start" : "End") >> eventsFile
			printf "event2.button2=" textCancel >> localizationFile
			
		} else {
			# there is no toc text, so just go read the page (this allows for seeing a popup without taking an {action} to get there)
			printf "display=false\n" >> eventsFile
			# printf "%s.text,\n", eventName >> localizationFile
		}
	}

    # generate the main event to start this book
	globalEventCounter++
	eventName = sprintf("Event%sStart", bookName)
	
	printf "\n[Event%sStart]\n", bookName >> eventsFile
	printf "buttons=1\n" >> eventsFile
    printf "display=false\n" >> eventsFile
    printf "event1=%s\n", events >> eventsFile
	printf "Event%sStart.text,\n", bookName >> localizationFile
	printf "Event%sStart.button1,\n", bookName >> localizationFile
	
	for (line = 1; line <= length(startLines); line++) {
		printf "%s\n", startLines[line] >> eventsFile
	}

    # generate the End event
	printf "\n[Event%sEnd]\n", bookName >> eventsFile
	printf "display=false\n" >> eventsFile
	printf "buttons=0\n" >> eventsFile
    printf "Event%sEnd.text,\n", bookName >> localizationFile
	
	for (line = 1; line <= length(endLines); line++) {
		printf "%s\n", endLines[line] >> eventsFile
	}

	return events
}

function OutputOrderedKeepToc(eventsFile, localizationFile, bookName, pages, startLines, endLines, isEndDirective,
    events, eventSeparator, visible, visibleIndex, conditions, conditionSeparator, pageIndex, condition, newEvents, lineIndex) {
	
	if (debug) printf "OutputOrderedKeepToc(%s, %s, %s, p[%i], s[%i], e[%i], %i)\n",
		eventsFile, localizationFile, bookName, length(pages), length(startLines), length(endLines), isEndDirective

    events = ""
    eventSeparator = ""
    
    # loop for visibility
    for (visible = 0; visible <= 1; visible++) {
        for (visibleIndex = 0; visibleIndex <= 2 ** (length(pages) - isEndDirective) - 1; visibleIndex++) {
            conditions = ""
            conditionSeparator = ""
            for (pageIndex = 1; pageIndex <= length(pages); pageIndex++) {
                if (and(visibleIndex, 2 ** (pageIndex - 1)) && pages[pageIndex][VISIBLE] != "") {
					if (pages[pageIndex][VISIBLEOPERATION] == "!") {
						condition = sprintf("%s,%s,0", pages[pageIndex][VISIBLE], (visible ? "==" : ">" ) )
					} else {
						condition = sprintf("%s,%s,0", pages[pageIndex][VISIBLE], (visible ? ">" : "==" ) )
					}
                    conditions = conditions conditionSeparator condition
                    conditionSeparator = " AND "
                    pages[pageIndex][SHOW] = visible
                } else {
                    pages[pageIndex][SHOW] = 1
                }
            }
            
            if (conditions != "") {
                newEvents = OutputOrderedKeepTocInternal(eventsFile, localizationFile, bookName, pages, conditions, isEndDirective)
                events = events eventSeparator newEvents
                eventSeparator = " "
            }
        }
    }

    for (pageIndex = 1; pageIndex <= (length(pages) - isEndDirective); pageIndex++) {
        pages[pageIndex][SHOW] = 1
    }
    newEvents = OutputOrderedKeepTocInternal(eventsFile, localizationFile, bookName, pages, "", isEndDirective)
    events = events eventSeparator newEvents
    eventSeparator = " "
    
    # create event to choose the toc show this time
    printf "\n[Event%sStart]\n", bookName >> eventsFile
    printf "buttons=1\n" >> eventsFile
    printf "event1=%s\n", events >> eventsFile
    printf "display=false\n" >> eventsFile
    printf "Event%sStart.text,\n", bookName >> localizationFile
    printf "Event%sStart.button1,\n", bookName >> localizationFile
    
    for(lineIndex = 1; lineIndex <= length(startLines); lineIndex++) {
        printf "%s\n", startLines[lineIndex] >> eventsFile
    }
    
    # and the End
    printf "\n[Event%sEnd]\n", bookName >> eventsFile
    printf "buttons=0\n" >> eventsFile
    printf "display=false\n" >> eventsFile
    printf "Event%sEnd.text,\n", bookName >> localizationFile
    
    for(lineIndex = 1; lineIndex <= length(endLines); lineIndex++) {
        printf "%s\n", endLines[lineIndex] >> eventsFile
    }
}

function OutputOrderedKeepTocInternal(eventsFile, localizationFile, bookName, pages, baseConditions, isEndDirective,
	events, eventSeparator, baseConditionSeparator, pageCount, pageIndex, pagesToShow, eventName, tocText, outputButtonIndex, buttonIndex, condition, conditions) {
	
	if (debug) printf "OutputOrderedKeepTocInternal(%s, %s, %s, p[%i], cond[%i], %i)\n",
		eventsFile, localizationFile, bookName, length(pages), baseConditions, isEndDirective

    events = ""
    eventSeparator = ""

    baseConditionSeparator = (baseConditions != "" ? " AND " : "")
    
	if (isEndDirective) {
		pages[length(pages)][SHOW] = 1
	}

    # create an array of pointers to pages
    pageCount = 0
    for (pageIndex = 1; pageIndex <= length(pages); pageIndex++) {
        if (pages[pageIndex][SHOW] > 0) {
            pagesToShow[++pageCount] = pageIndex
        }
    }
	if (debug) printf "pageCount = %i\n", pageCount;
	
    # go through the pages; for each one, generate a TOC; count past the end for the special case when all pages are read
    for (pageIndex = 1; pageIndex <= length(pagesToShow); pageIndex++) {
        globalEventCounter++
        eventName = sprintf("Event%sToc%i", bookName, globalEventCounter)
        events = events eventSeparator eventName
        eventSeparator = " "
        
        printf "\n[%s]\n", eventName >> eventsFile
        tocText = pages[pagesToShow[pageIndex]][TOCTEXT]
		if (isEndDirective && pageIndex == length(pagesToShow)) tocText = pages[pagesToShow[pageIndex]][TEXT]
        printf "%s.text,%s\n", eventName, FixQuotes( tocText ) >> localizationFile
        
        outputButtonIndex = 0
		# output all the pages that have already been read
		for (buttonIndex = 1; buttonIndex < pageIndex; buttonIndex++) {
			outputButtonIndex++
			printf "event%i=Event%sReadPage%i\n", outputButtonIndex, bookName, pagesToShow[buttonIndex] >> eventsFile
			printf "Event%sToc%i.button%i,%s\n", bookName, pageIndex, outputButtonIndex, pages[pagesToShow[buttonIndex]][NAME] >> localizationFile
		}
        
		# printf "%s:  pages[pagesToShow[%i]][TOCTEXT]=%s, isEndDirective=%i\n", bookName, pageIndex, pages[pagesToShow[pageIndex]][TOCTEXT], isEndDirective >> stderr
        if (pageIndex <= length(pagesToShow) - isEndDirective) {
            # add the only actionable button for this TOC
            outputButtonIndex++
            printf "event%i=Event%sReadPage%i\n", outputButtonIndex, bookName, pagesToShow[pageIndex] >> eventsFile
            printf "%s.button%i,{action} %s\n", eventName, outputButtonIndex, pages[pagesToShow[pageIndex]][NAME] >> localizationFile
            conditions = baseConditions baseConditionSeparator sprintf("read%sPage%i,==,0", bookName, pagesToShow[pageIndex])

			# the condition is only that the actionable page has not been read yet
			printf "vartests=%s\n", ConvertToVarTests(conditions) >> eventsFile
        
			# add cancel
			outputButtonIndex++
			printf "event%i=Event%sEnd\n", outputButtonIndex, bookName >> eventsFile
			printf "%s.button%i,%s\n", eventName, outputButtonIndex, textCancel >> localizationFile

        } else {
			outputButtonIndex++
			printf "event%i=Event%sEnd\n", outputButtonIndex, bookName >> eventsFile
			printf "%s.button%i,%s\n", eventName, outputButtonIndex, textCancel >> localizationFile
        }
        
        printf "buttons=%i\n", outputButtonIndex >> eventsFile
        
        # output the text for the TOC
    }
    
    return events
}

 
function UnionOperations(operationLine, iniLines,    lineIndex) {
    # operationLine is of the form "operations=a,op,b[ c,op,d[...]]
    # iniLines contains an array of lines that might contain an operations directive
    
    operationLine = trim(operationLine)
    
    for(lineIndex = 1; lineIndex <= length(iniLines); lineIndex++) {
        if (iniLines[lineIndex] ~ /^\s*operations=/) {
            operationLine = CombineOperations(operationLine, iniLines[lineIndex])
        }
    }

    return operationLine
}

function CombineOperations(line1, line2) {

    # remove operations=
    line2 = trim(substr(line2, length("operations=") + 1))
    
    if (line2 != "") {
        line1 = sprintf("%s %s", line1, line2)
    }

    return line1
}
