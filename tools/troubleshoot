#!/bin/gawk -f

@include "common.awk"

# usage:  awk -f troubleshoot.awk journal.txt events.ini  localization.book.english.txt 
#
# Reads various .ini and .txt files and validates the contents
#
#       included automatically:
#			tiles.ini
#			tokens.ini
#			events.ini
#			items.ini
#			spawns.ini
#			ui.ini
#			monsters.ini
#			puzzles.ini
#			attack.events.ini
#			journal.events.ini

#
# Things checked
#       x Events that are used exist
#       x Events that are defined are used
#       x Events have localization keys
#       # localization keys are used

BEGIN	{   debug = true
            NAME = 1    	# The name of the event, qitem, etc: the item
            FILE = 2    	# File name where this item was defined
            LINE = 3    	# Line in file where this item was defined
            USED = 4    	# Set true when a reference to this item is found
            REFS = 5    	# An array of boolean indexed by name; true only if the named item exists
            KEYS = 6    	# Array of localization keys referenced by this item
			ISGAMEFILE = 7	# True if this is from a game file
			PACKID = 8		# the expansion code
			
			lookingForAdd = true
			lookingForButton = true
			lookingForEvent = true
			lookingForRemove = true

			valkyrieDataPath = "/c/Program Files (x86)/Valkyrie/valkyrie_Data/StreamingAssets/content/MoM"

			
			special["Quest"] = ""
			special["QuestData"] = ""
			special["QuestText"] = ""
			special["EventStartupStart"] = ""
			
			injectGameFilesIntoInputStream()
		}

BEGINFILE { isIni = FILENAME ~ /.*[.]ini$/
            if (isIni) {
                FS = "="
            } else {
                FS = ","
            }
            $0 = $0

			isGameFile = (FILENAME ~ /[/]/)
			filename = FILENAME
			if (isGameFile) {
				filename = substr(filename, length(valkyrieDataPath) + 2)
			}
			
			if (FILENAME ~ /^base/) {
				packId = "base"
			}
			
			print (isGameFile ? "Game file: " : "File: ") filename 
        }

#### .ini files

/[[](ContentPack|ContentPackData)]/ {
			next
		}

/^[[]/  {   section = substr($0, 2, length($0) - 2)
            if (section in sections) error("Duplicate", section, FILENAME, FNR, "")

			isSpecial = section in special

            sections[section][NAME] = name
            sections[section][FILE] = filename
            sections[section][LINE] = FNR
            sections[section][KEYS][section ".text"] = isSpecial || isGameFile
			sections[section][USED] = isSpecial || isGameFile
			sections[section][ISGAMEFILE] = isGameFile
			sections[section][PACKID] = packId
            # "declare" a more-or-less empty array
            sections[section][REFS]["*"] = "*"
            next
        }

# this is from the scenario quest.ini and lists all the expasions needed
/^packs=/ {	split($2, tempQuestPacks, " ")
			for(packIndex in tempQuestPacks) {
				packId = tempQuestPacks[packIndex]
				if (packId ~ /(MoM1EI|Mom1CK)/) packId = "RN"
				questPacks[tempQuestPacks[packIndex]] = false
			}
		}
				
# this is from the packs
/^id=/	{	packId = $2
			if (packId ~ /(MoM1EI|Mom1CK)/) packId = "RN"
			gamePacks[packId] = false
		}

$1 == "buttons" {
			for(i = 1; i <= $2; i++) {
				if (!((section ".button" i) in sections[section][KEYS])) {
					sections[section][KEYS][section ".button" i] = false
				}
			}
		}

$1 ~ /^(add|event[0-9]+|remove|monster|inspect|itemname)$/ {
            split($2, events, /[ \t]+/)
			
            for(i = 1; i <= length(events); i++) {
				name = events[i]
				if ($1 == "monster" && name !~ "^(Custom)?Monster") name = "Monster" name
				
				if (!(name in sections[section][REFS])) {
					sections[section][REFS][name] = false
				}
			}
        }

/^starting=true/ {
			sections[section][USED] = true
		}

/^trigger=/ {
			sections[section][USED] = true
		}

isIni   {   next
        }
        
#### Localization files

$1 ~ /[.](button|text)/ {
            if ($1 in localization) {
                error("Duplicate", $1, filename, FNR, section)
                next;
            }
            
            localization[$1][FILE] = filename
            localization[$1][LINE] = FNR
            localization[$1][USED] = ISGAMEFILE
            localization[$1][ISGAMEFILE] = isGameFile
            next
        }

# wrap up

END     {   
            # referenced sections exist
			print "==================================================================== missing referenced sections"
            for(section in sections) {
                for(event in sections[section][REFS]) {
					if (event == "*") continue;
				
                    found = event in sections
					sections[section][REFS][event] = found

					if (found) {
						sections[event][USED] = true
					} else {
                        error("Missing", event, sections[section][FILE], sections[section][LINE], section)
                    }
                }
            }
            
            # sections are used
			print "==================================================================== unused sections"
            for(section in sections) {
                if (!sections[section][USED]) error("Unused", section, sections[section][FILE], sections[section][LINE], section)
            }
            
            print "==================================================================== missing localization keys"
            # localization keys exist
            for(section in sections) {
                for (key in sections[section][KEYS]) {
                    found = key in localization || section in special
                    sections[section][KEYS][key] = found
					if (found) localization[key][USED] = true
					
					if (!found && !sections[section][ISGAMEFILE]) error("Missing", key, sections[section][FILE], sections[section][LINE], section)
                }
            }
            
            print "==================================================================== unused localization keys"
            # localizations are used
            for(key in localization) {
                if (!localization[key][USED]) {
                    error("Unused", key, localization[key][FILE], localization[key][LINE], "")
                }
            }

            print "==================================================================== quest needs these unselected packs"
			for(section in sections) {
				for(ref in sections[section][REFS]) {
					packId = sections[ref][PACKID]
					if (packId != "") {
						gamePacks[packId] = true
					
						if (packId in questPacks) questPacks[packId] = true
					}

					if (packId != "" && !sections[section][ISGAMEFILE] && !(packId in questPacks)) {
						error("Uses " packId, ref, sections[section][FILE], sections[section][LINE], section)
					}
				}
			}
			
			for(packId in questPacks) {
				if (!gamePacks[packId]) print packId
			}
			
			print "==================================================================== quest doesn't need these selected packs"
			for(packId in questPacks) {
				if (gamePacks[packId] && !questPacks[packId]) print packId
			}		
		}
		
function error(type, name, filename, line, section,
	workingSection) {
    
	workingSection = section == "" ? "" : "(" section ")"
	printf "%-30s %-10s %s %s\n", filename "@" line, type, name, workingSection
}

function injectGameFilesIntoInputStream(noparameters,
	cmd, file) {
	
	cmd = sprintf("shopt -s globstar; pushd '%s' >/dev/null; for i in **/*.ini; do [ -f \"$i\" ] && echo \"$i\"; done; popd >/dev/null", valkyrieDataPath)
    while ((cmd | getline file) > 0) {
		ARGV[++ARGC] = sprintf("%s/%s", valkyrieDataPath, file)
	}
	close(cmd)
	
	cmd = sprintf("shopt -s globstar; pushd '%s' >/dev/null; for i in **/*.txt; do [ -f \"$i\" ] && echo \"$i\"; done; popd >/dev/null", valkyrieDataPath)
	while ((cmd | getline file) > 0) {
		ARGV[++ARGC] = sprintf("%s/%s", valkyrieDataPath, file)
	}
	close(cmd)
}
